from math import exp
from random import seed, random_float64
from time import now


struct Array:
    var data: Pointer[Float64]
    var size: Int
   
    fn __init__(inout self, size: Int):
        self.size = size
        self.data = Pointer[Float64].alloc(self.size)

    fn __init__(inout self, size: Int, default_value: Float64):
        self.size = size
        self.data = Pointer[Float64].alloc(self.size)
        for i in range(self.size):
            self.data.store(i, default_value)

    fn __copyinit__(inout self, copy: Array):
        self.size = copy.size
        self.data = Pointer[Float64].alloc(self.size)
        for i in range(self.size):
            self.data.store(i, copy[i])

    fn __getitem__(self, i: Int) -> Float64:
      return self.data.load(i)

    fn __setitem__(self, i: Int, value: Float64):
      self.data.store(i, value)

    fn __del__(owned self):
      self.data.free()

    fn len(self) -> Int:
      return self.size

struct Array2D:
    var data: Pointer[Float64]
    var sizeX: Int
    var sizeY: Int
   
    fn __init__(inout self, sizeX: Int, sizeY: Int):
        self.sizeX = sizeX
        self.sizeY = sizeY
        self.data = Pointer[Float64].alloc(self.sizeX * sizeY)

    fn __init__(inout self, sizeX: Int, sizeY: Int, default_value: Float64):
        self.sizeX = sizeX
        self.sizeY = sizeY
        self.data = Pointer[Float64].alloc(self.sizeX * self.sizeY)
        for i in range(self.sizeX * self.sizeY):
            self.data.store(i, default_value)

    fn __copyinit__(inout self, copy: Array2D):
        self.sizeX = copy.sizeX
        self.sizeY = copy.sizeY
        self.data = Pointer[Float64].alloc(self.sizeX * self.sizeY)
        for i in range(self.sizeX * self.sizeY):
            self.data.store(i, copy[i])

    fn __getitem__(self, i: Int, j: Int) -> Float64:
        return self[self.sizeY * i + j]

    fn __getitem__(self, i: Int) -> Float64:
      return self.data.load(i)

    fn __setitem__(self, i: Int, value: Float64):
      self.data.store(i, value)

    fn __setitem__(self, i: Int, j: Int, value: Float64):
        self[self.sizeY * i + j] = value

    fn __del__(owned self):
      self.data.free()

    fn len(self) -> Int:
      return self.sizeY * self.sizeX

    fn rows(self) -> Int:
        return self.sizeX

    fn columns(self) -> Int:
        return self.sizeY      

struct NeuralNetwork:
    var weights: Array
    var bias: Array

    fn __init__(inout self):
        self.weights = Array(6)
        self.bias = Array(3)

        for i in range(6):
            if i < 3:
                self.bias[i] = random_float64()
            
            self.weights[i] = random_float64()


    fn feed_forward(self, x0: Float64, x1: Float64, only_predict: Bool = True) -> Array:
        let s_h0: Float64 = x0 * self.weights[0] + x1 * self.weights[1] + self.bias[0]
        let s_h1: Float64 = x0 * self.weights[2] + x1 * self.weights[3] + self.bias[1]
        let s_oo: Float64 = x0 * self.weights[4] + x1 * self.weights[5] + self.bias[2]

        let h0: Float64 = self.sigmoid_activation_function(s_h0)
        let h1: Float64 = self.sigmoid_activation_function(s_h1)
        let oo: Float64 = self.sigmoid_activation_function(s_oo)

        if only_predict:
            return Array(1, oo)
        
        let t = Array(6)
        t[0] = s_h0
        t[1] = h0
        t[2] = s_h1
        t[3] = h1
        t[4] = s_oo
        t[5] = oo

        return t

    fn mse_loss(self, y: Float64, y_true: Float64) -> Float64:
        return (y - y_true) ** 2

    fn sigmoid_activation_function(self, x: Float64) -> Float64:
        return 1.0/(1+exp(-x))

    fn derivation_sigmoid_activation_function(self, x: Float64) -> Float64:
        return self.sigmoid_activation_function(x) * (1 - self.sigmoid_activation_function(x))

    fn fit(self, X: Array2D, Y: Array, learning_rate: Float64, epochs: Int):
        for i in range(epochs):
            for j in range(X.rows()):
                let y = self.feed_forward(X[j, 0], X[j, 1], False)

                let s_h0 = y[0]
                let h0 = y[1]
                let s_h1 = y[2]
                let h1 = y[3]
                let s_o0 = y[4]
                let o0 = y[5]

                let dMSE = -2 * (Y[j] - y[5])

                let dw4 = h0 * self.derivation_sigmoid_activation_function(s_o0)
                let dw5 = h1 * self.derivation_sigmoid_activation_function(s_o0)
                let db2 = self.derivation_sigmoid_activation_function(s_o0)

                let dh0 = self.weights[4] * self.derivation_sigmoid_activation_function(s_o0)
                let dh1 = self.weights[5] * self.derivation_sigmoid_activation_function(s_o0)

                let dw0 = self.weights[0] * self.derivation_sigmoid_activation_function(s_h0)
                let dw1 = self.weights[1] * self.derivation_sigmoid_activation_function(s_h0)
                let db0 =  self.derivation_sigmoid_activation_function(s_h0)

                let dw2 = self.weights[2] * self.derivation_sigmoid_activation_function(s_h1)
                let dw3 = self.weights[3] * self.derivation_sigmoid_activation_function(s_h1)
                let db1 = self.derivation_sigmoid_activation_function(s_h1)


                self.weights[0] -= learning_rate * dMSE * dh0 * dw0
                self.weights[1] -= learning_rate * dMSE * dh0 * dw1
                self.bias[0] -= learning_rate * dMSE * dh0 * db0

                self.weights[2] -= learning_rate * dMSE * dh1 * dw2
                self.weights[3] -= learning_rate * dMSE * dh1 * dw3
                self.bias[1] -= learning_rate * dMSE * dh1 * db1

                self.weights[4] -= learning_rate * dMSE * dw4
                self.weights[5] -= learning_rate * dMSE * dw5
                self.bias[2] -= learning_rate * dMSE * db2

            if i % 10 == 0:
                var mse : Float64 = 0.0
                for j in range(X.rows()):
                    let y = self.feed_forward(X[j, 0], X[j, 1], True)
                    mse += self.mse_loss(y[0], Y[j])
                    print(X[j, 0].__int__(), X[j, 1].__int__(), (y[0] > 0.5).__int__())
                
                print("Epoch ", i, " loss = ", mse/X.rows())


fn main():
    seed(now())
    let X : Array2D = Array2D(4, 2)
    let Y : Array = Array(4, 1)

    #AND
    X[0, 0] = 0
    X[0, 1] = 0
    Y[0] = 0

    X[1, 0] = 0
    X[1, 1] = 1
    Y[1] = 0

    X[2, 0] = 1
    X[2, 1] = 0
    Y[2] = 0

    X[3, 0] = 1
    X[3, 1] = 1
    Y[3] = 1


    let network = NeuralNetwork()
    network.fit(X, Y, 0.1, 10000)
    print("Predictions: ")
    for i in range(4):
        let result = network.feed_forward(X[i, 0], X[i, 1])
        print(X[i, 0].__int__(), X[i, 1].__int__(), (result[0] > 0.5).__int__())
